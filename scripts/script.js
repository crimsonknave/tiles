// Generated by CoffeeScript 1.6.3
(function() {
  var $, build_map, fisherYates, lay_random_tiles;

  $ = jQuery;

  lay_random_tiles = function(colors, tiles, board, interval) {
    var color, i, last_was_placeable, num, stack, tile_stack, timer, type, unplaceable, _i, _j, _len, _ref;
    console.log('laying tiles');
    this.stop = false;
    this.running = true;
    tile_stack = [];
    unplaceable = [];
    last_was_placeable = true;
    _ref = colors.reverse();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      color = _ref[_i];
      stack = [];
      for (type in tiles) {
        num = tiles[type];
        for (i = _j = 1; _j <= num; i = _j += 1) {
          stack.push([color, type]);
        }
      }
      fisherYates(stack);
      tile_stack = tile_stack.concat(stack);
    }
    return timer = setInterval((function() {
      var next_tile;
      if (this.stop) {
        console.log('Stopping as requested');
        clearInterval(timer);
        this.running = false;
        return false;
      }
      if (tile_stack.length === 0 && (!last_was_placeable || unplaceable.length === 0)) {
        console.log('Placed the last tile');
        console.log(tile_stack);
        console.log(unplaceable);
        console.log("Placed " + board.count + " tiles");
        clearInterval(timer);
        this.running = false;
        console.log('after');
      }
      if (unplaceable.length > 0 && last_was_placeable) {
        next_tile = unplaceable.pop();
      } else {
        next_tile = tile_stack.pop();
      }
      return insert_tile.apply(this, next_tile);
    }), interval);
  };

  fisherYates = function(arr) {
    var i, j, _ref, _results;
    i = arr.length;
    if (i === 0) {
      return false;
    }
    _results = [];
    while (--i) {
      j = Math.floor(Math.random() * (i + 1));
      _results.push((_ref = [arr[j], arr[i]], arr[i] = _ref[0], arr[j] = _ref[1], _ref));
    }
    return _results;
  };

  $(document).ready(function() {
    $('.save').click(function() {
      var canvas, image;
      canvas = document.getElementById('my_canvas');
      image = canvas.toDataURL('map.png').replace('image/png', 'image/octet-stream');
      if (!this.lnk) {
        this.lnk = document.createElement('a');
      }
      this.lnk.download = 'map.png';
      this.lnk.href = image;
      return this.lnk.click();
    });
    return $('.submit').click(function() {
      var interval, size, tiles;
      size = parseInt($('.size').val());
      interval = parseInt($('.interval').val());
      tiles = {
        '4': parseInt($('.4').val()) || 0,
        '3': parseInt($('.3').val()) || 0,
        '2-straight': parseInt($('.2-straight').val()) || 0,
        '2-turn': parseInt($('.2-turn').val()) || 0,
        '1': parseInt($('.1').val()) || 0
      };
      return build_map(tiles, size, interval);
    });
  });

  build_map = function(tiles, size, interval) {
    var canvas, context, stopping;
    canvas = document.getElementById('my_canvas');
    context = canvas.getContext('2d');
    this.stop = true;
    return stopping = setInterval((function() {
      var board, colors;
      if (this.running) {
        return console.log('waiting for the previous draw to stop');
      } else {
        console.log('starting to draw');
        context.clearRect(0, 0, 2057, 2057);
        colors = ['green', 'yellow', 'red'];
        board = new Board(context, size);
        board.add_start_tile();
        lay_random_tiles(colors, tiles, board, interval);
        return clearInterval(stopping);
      }
    }), 10);
  };

}).call(this);
