// Generated by CoffeeScript 1.6.3
(function() {
  var $, Board, Tile, fisherYates, lay_random_tiles;

  $ = jQuery;

  lay_random_tiles = function(tiles, board) {
    var color, east, i, north, num, selected_slot, slots, south, t, tile, tile_stack, type, types, west, x, y, _i, _j, _len, _results;
    tile_stack = [];
    for (color in tiles) {
      types = tiles[color];
      for (type in types) {
        num = types[type];
        for (i = _i = 1; _i <= num; i = _i += 1) {
          tile_stack.push("" + color + type + ".png");
        }
      }
    }
    fisherYates(tile_stack);
    _results = [];
    for (_j = 0, _len = tile_stack.length; _j < _len; _j++) {
      t = tile_stack[_j];
      slots = board.find_valid_openings();
      selected_slot = slots[Math.floor(Math.random() * slots.length)];
      x = selected_slot[0];
      y = selected_slot[1];
      switch (t) {
        case 'blue2-straight.png':
          east = true;
          west = true;
          north = false;
          south = false;
          break;
        case 'blue2-turn.png':
          east = true;
          west = false;
          north = true;
          south = false;
          break;
        case 'blue3.png':
          east = true;
          west = true;
          north = true;
          south = false;
          break;
        case 'blue4.png':
          east = true;
          west = true;
          north = true;
          south = true;
      }
      tile = new Tile(t, x, y, north, east, south, west);
      _results.push(board.add_tile(tile));
    }
    return _results;
  };

  fisherYates = function(arr) {
    var i, j, _ref, _results;
    i = arr.length;
    if (i === 0) {
      return false;
    }
    _results = [];
    while (--i) {
      j = Math.floor(Math.random() * (i + 1));
      _results.push((_ref = [arr[j], arr[i]], arr[i] = _ref[0], arr[j] = _ref[1], _ref));
    }
    return _results;
  };

  Tile = (function() {
    function Tile(image, x, y, north, east, south, west) {
      this.image = image;
      this.x = x;
      this.y = y;
      this.north = north;
      this.east = east;
      this.south = south;
      this.west = west;
      this.offset = 7;
    }

    Tile.prototype.draw = function(context) {
      console.log("drawing " + this.image + ", at " + this.x + "x" + this.y);
      this.img = new Image;
      this.img.setAtX = this.x + this.offset;
      this.img.setAtY = -1 * this.y + this.offset;
      this.img.onload = function() {
        return context.drawImage(this, this.setAtX * 100, this.setAtY * 100, 100, 100);
      };
      this.img.src = this.image;
      return this;
    };

    return Tile;

  })();

  Board = (function() {
    function Board(context) {
      this.context = context;
      this.tiles = [];
    }

    Board.prototype.add_start_tile = function() {
      var start_tile;
      start_tile = new Tile('start.png', 0, 0, true, true, true, true);
      start_tile.draw(this.context);
      return this.tiles.push(start_tile);
    };

    Board.prototype.add_tile = function(tile) {
      if (tile.draw(this.context)) {
        return this.tiles.push(tile);
      }
    };

    Board.prototype.tile_at = function(x, y) {
      var exists, tile, _i, _len, _ref;
      exists = false;
      tile = this.tiles[0];
      _ref = this.tiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        if (tile.x === x && tile.y === y) {
          exists = true;
        }
      }
      return exists;
    };

    Board.prototype.tile_count = function() {
      return this.tiles.length;
    };

    Board.prototype.find_valid_openings = function() {
      var coords, openings, tile, _i, _len, _ref;
      openings = [];
      _ref = this.tiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        if (tile.north) {
          coords = [tile.x, tile.y + 1];
          if (!this.tile_at.apply(this, coords)) {
            openings.push(coords);
          }
        }
        if (tile.east) {
          coords = [tile.x + 1, tile.y];
          if (!this.tile_at.apply(this, coords)) {
            openings.push(coords);
          }
        }
        if (tile.south) {
          coords = [tile.x, tile.y - 1];
          if (!this.tile_at.apply(this, coords)) {
            openings.push(coords);
          }
        }
        if (tile.west) {
          coords = [tile.x - 1, tile.y];
          if (!this.tile_at.apply(this, coords)) {
            openings.push(coords);
          }
        }
      }
      return openings;
    };

    return Board;

  })();

  $(document).ready(function() {
    var board, canvas, context, tiles;
    canvas = document.getElementById('my_canvas');
    context = canvas.getContext('2d');
    tiles = {
      blue: {
        '4': 7,
        '3': 13,
        '2-straight': 20,
        '2-turn': 14
      }
    };
    board = new Board(context);
    board.add_start_tile();
    lay_random_tiles(tiles, board);
    console.log(board);
    return console.log(board.tile_count());
  });

}).call(this);
